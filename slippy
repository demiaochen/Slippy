#!/usr/bin/env python3

"""
UNSW COMP2041 22T2 Assignment 2 Slippy
    https://cgi.cse.unsw.edu.au/~cs2041/22T2/assignments/ass2/index.html

Written by: Demiao Chen (z5289988)
░░░░░░░░░░░░░░░░░█▀▄░█▀▀░█▀▄░█▀▀░█░█░░░█▀▀░█░█░█▀▀░█▀█░░░░░░░░░░░░░░░░░░
░░░░░░░░░░░░░░░░░█░█░█▀▀░█▀▄░█▀▀░█▀▄░░░█░░░█▀█░█▀▀░█░█░░░░░░░░░░░░░░░░░░
░░░░░░░░░░░░░░░░░▀▀░░▀▀▀░▀░▀░▀▀▀░▀░▀░░░▀▀▀░▀░▀░▀▀▀░▀░▀░░░░░░░░░░░░░░░░░░
Date: 6-Aug-2022

    Slippy stands for [S]ed [L]anguage [I]nterpreter in [P]ure [PY]thon.
    A subset of the important Unix/Linux tool Sed.
    Sed is a very complex program that has many commands.
    Sed: https://www.gnu.org/software/sed/manual/sed.html
    Slippy is a POSIX-compatible subset of sed with extended 
    regular expressions (EREs).

    
   ▄████████  ▄█        ▄█     ▄███████▄    ▄███████▄ ▄██   ▄   
  ███    ███ ███       ███    ███    ███   ███    ███ ███   ██▄ 
  ███    █▀  ███       ███▌   ███    ███   ███    ███ ███▄▄▄███ 
  ███        ███       ███▌   ███    ███   ███    ███ ▀▀▀▀▀▀███ 
▀███████████ ███       ███▌ ▀█████████▀  ▀█████████▀  ▄██   ███ 
         ███ ███       ███    ███          ███        ███   ███ 
   ▄█    ███ ███▌    ▄ ███    ███          ███        ███   ███ 
 ▄████████▀  █████▄▄██ █▀    ▄████▀       ▄████▀       ▀█████▀  
             ▀                                                  

                                ASCII arts generated from: textkool.com
"""

import sys
import os
import re

import argparse
from argparse import ArgumentParser
import shutil # cp

# Slippy command will be one of 'q', 'p', 'd', or 's'
SLIPPY_COMMAND = ["q", "p", "d", "s"]
TEMP_FILE_W = ".slippy_temp_w"
TEMP_FILE_R = ".slippy_temp_r"
FILE_BUFFER_LIMIT = 8100000 # 1MB read limit from stdin

################################ COMMANDs ####################################


def sed_quit(pattern, args):
    with(open(TEMP_FILE_R, "r")) as f:
        if type(pattern) == int:
            for _ in range(0, int(pattern)):
                line = f.readline()
                if line == "":
                    break
                if not args.n:
                    print(line, end="")

        else:
            for line in f.readlines():
                if not args.n:
                    print(line, end="")
                if re.search(pattern, line):
                    break


def sed_print(pattern, args):
    with(open(TEMP_FILE_R, "r")) as f:
        if pattern == " ":
            for line in f.readlines():
                if not args.n:
                    print(line, end="")
                print(line, end="")
        elif type(pattern) == int:
            for idx, line in enumerate(f.readlines()):
                if not args.n:
                    print(line, end="")
                # print target line
                if idx + 1 == int(pattern):
                    print(line, end="")
        else:
            for line in f.readlines():
                if not args.n:
                    print(line, end="")
                if re.search(pattern, line):
                    print(line, end="")


def sed_delete(pattern, args):
    with(open(TEMP_FILE_R, "r")) as f:
        if pattern == " ":
            pass
        elif type(pattern) == int:
            for idx, line in enumerate(f.readlines()):
                if idx + 1 == int(pattern):
                    continue
                if not args.n:
                    print(line, end="")
        else:
            for line in f.readlines():
                if re.search(pattern, line):
                    continue
                if not args.n:
                    print(line, end="")


def sed_search(position, pattern, target, replacement, is_global, args):
    with(open(TEMP_FILE_R, "r")) as f:
        if position == -1:
            for idx, line in enumerate(f.readlines()):
                # find pattern match, replace it
                if re.search(pattern, line):
                    count = 1
                    if is_global:
                        count = 0
                    line = re.sub(target, replacement, line, count=count)
                    print(line, end="")
                    continue
                if not args.n:
                    print(line, end="")
        else:
            for idx, line in enumerate(f.readlines()):
                # only replace position line
                if idx + 1 == position:
                    # find pattern match, replace it
                    if re.search(pattern, line):
                        count = 1
                        if is_global:
                            count = 0
                        line = re.sub(target, replacement, line, count=count)
                        print(line, end="")
                        continue
                if not args.n:
                    print(line, end="")


# options is a dictionary that maps command to function
options = {"q": sed_quit, "p": sed_print, "d": sed_delete, "s": sed_search}


#################################### HELPERs ######################################


def get_splitter(string):
    if string[0] in ['s']:
        splitter = string[1]
        if splitter == string[-1]:
            return splitter
    for ch in string:
        if ch in ["/", "|", "#"]:
            return ch
    return None


def invalid_command():
    if os.isfile(TEMP_FILE_W):
        os.remove(TEMP_FILE_W)
    if os.isfile(TEMP_FILE_R):
        os.remove(TEMP_FILE_R)
    print(f"{sys.argv[0]}: command line: invalid command")
    sys.exit(1)


# return regex pattern
def get_pattern(commands, position):
    try:
        return re.compile(commands[position])
    except:
        print(f"{sys.argv[0]}: command line: invalid command")
        sys.exit(1)


# return string
def get_sed_command(commands, position):
    try:
        sed_command = commands[position]
        if sed_command not in SLIPPY_COMMAND:
            invalid_command()
        return sed_command
    except:
        invalid_command()


################################## MAIN ######################################


def main():
    regex_mode = True
    # command line arguments analysis
    parser = ArgumentParser(
        usage=f"{sys.argv[0]} [-i] [-n] [-f <script-file> | <sed-command>] [<files>...]",
        exit_on_error=False,
    )
    parser.add_argument("-i", action="store_true")
    parser.add_argument("-n", action="store_true")
    # parser.add_argument("-f script", action="store_true")
    parser.add_argument("command")
    parser.add_argument("files", action="store_true")

    if len(sys.argv) == 1:
        parser.print_usage()
        sys.exit(1)

    try:
        args, unknown = parser.parse_known_args()
        if unknown != []:
            print(f"{sys.argv[0]}: error")
            sys.exit(1)
    except argparse.ArgumentError as e:
        print(e)

    # change stdout to 
    sys.stdout = open(TEMP_FILE_W, 'w')
    # f_temp_r = open(TEMP_FILE_R, 'w')

    # copy stdin to TEMP_FILE_W
    print(sys.stdin.read(FILE_BUFFER_LIMIT), end='')

    # commands separated by ; and newline
    args_command_list = (re.split(';|\n', args.command))
    # print(args_command_list)
    for args_command in args_command_list:
        
        # sync TEMP_FILE_W to TEMP_FILE_R
        sys.stdout.close()
        shutil.copyfile(TEMP_FILE_W, TEMP_FILE_R)
        sys.stdout = open(TEMP_FILE_W, 'w')

        # print(args_command)
        splitter = get_splitter(args_command)

        # Regex mode
        if splitter != None:  # sed splitter
            commands = args_command.split(splitter)
            is_global = False
            # -1 means apply to all lines
            position = -1

            # /pattern/command  eg /.3/q
            # /pattern/command/target/repl/q  eg '/1.1/s/1/-/g'
            if commands[0] == "":
                pattern = get_pattern(commands, 1)
                sed_command = get_sed_command(commands, 2)
                # '/1.1/s/1/-/g'
                if sed_command == "s":
                    try:
                        target = commands[3]
                        replacement = commands[4]
                    except:
                        invalid_command()
                    try:
                        if commands[5] == "g":
                            is_global = True
                    except:
                        pass

            # s/pattern/replacement/g
            # '5s/5/9/g'
            # ['5s', '5', '9', 'g']
            else:
                # separate number and command
                head = re.split("(\d+)", commands[0])
                if len(head) == 1:  # s/5/9/g' ['s']
                    sed_command = head[0]
                elif len(head) == 3:  #'5s/5/9/g' ['', '5', 's']
                    try:
                        position = int(head[1])
                    except:
                        invalid_command()
                    sed_command = get_sed_command(head, 2)
                else:
                    invalid_command()

                try:
                    if commands[3] == "g":
                        is_global = True
                except:
                    pass

                if sed_command == "s":
                    try:
                        pattern = get_pattern(commands, 1)
                        target = commands[1]
                        replacement = commands[2]
                    except:
                        invalid_command()

        # Number Mode
        else:
            sed_command = args_command[-1]
            if len(args_command) == 1:
                pattern = " "
            else:
                try:
                    pattern = int(args_command[:-1])
                except:
                    invalid_command()
                # handled by flag error
                # if pattern < 0:
                #     args.print_usage()
                #     sys.exit(1)
            if sed_command not in ["q", "p", "d"]:
                invalid_command()

        if sed_command not in SLIPPY_COMMAND:
            invalid_command()

        # perform command
        if sed_command in ["q", "p", "d"]:
            options[sed_command](pattern, args)
        elif sed_command == "s":
            sed_search(position, pattern, target, replacement, is_global, args)

    # close temp file and change stdout back to original
    sys.stdout.close()
    sys.stdout = sys.__stdout__


    output = open(TEMP_FILE_W, 'r')
    print(output.read(), end="")
    output.close()
    os.remove(TEMP_FILE_W)
    os.remove(TEMP_FILE_R)

if __name__ == "__main__":
    main()
