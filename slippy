#!/usr/bin/env python3

"""
UNSW COMP2041 22T2 Assignment 2 Slippy
    https://cgi.cse.unsw.edu.au/~cs2041/22T2/assignments/ass2/index.html

Written by: Demiao Chen (z5289988)
░░░░░░░░░░░░░░░░░█▀▄░█▀▀░█▀▄░█▀▀░█░█░░░█▀▀░█░█░█▀▀░█▀█░░░░░░░░░░░░░░░░░░
░░░░░░░░░░░░░░░░░█░█░█▀▀░█▀▄░█▀▀░█▀▄░░░█░░░█▀█░█▀▀░█░█░░░░░░░░░░░░░░░░░░
░░░░░░░░░░░░░░░░░▀▀░░▀▀▀░▀░▀░▀▀▀░▀░▀░░░▀▀▀░▀░▀░▀▀▀░▀░▀░░░░░░░░░░░░░░░░░░
Date: 6-Aug-2022

    Slippy stands for [S]ed [L]anguage [I]nterpreter in [P]ure [PY]thon.
    A subset of the important Unix/Linux tool Sed.
    Sed is a very complex program that has many commands.
    Sed: https://www.gnu.org/software/sed/manual/sed.html
    Slippy is a POSIX-compatible subset of sed with extended 
    regular expressions (EREs).

    
   ▄████████  ▄█        ▄█     ▄███████▄    ▄███████▄ ▄██   ▄   
  ███    ███ ███       ███    ███    ███   ███    ███ ███   ██▄ 
  ███    █▀  ███       ███▌   ███    ███   ███    ███ ███▄▄▄███ 
  ███        ███       ███▌   ███    ███   ███    ███ ▀▀▀▀▀▀███ 
▀███████████ ███       ███▌ ▀█████████▀  ▀█████████▀  ▄██   ███ 
         ███ ███       ███    ███          ███        ███   ███ 
   ▄█    ███ ███▌    ▄ ███    ███          ███        ███   ███ 
 ▄████████▀  █████▄▄██ █▀    ▄████▀       ▄████▀       ▀█████▀  
             ▀                                                  

                                ASCII arts generated from: textkool.com
"""

import os
import re
import shutil  # cp
import sys
import argparse
from argparse import ArgumentParser


# Slippy command will be one of the following:
SLIPPY_COMMAND = ["q", "p", "d", "s", "a", "i", "c"]
TEMP_FILE = ".slippy_temp_w"

# signal macros
DELETE = int(1)
QUIT = int(2)
REPLACED = int(3)
APPEND = int(4)
CHANGE = int(5)

##############################################################################
#                               COMMANDs                                     #
##############################################################################

"""    
command_args = {
    "position": int or regex,  # -1 for all, -2 for last
    "position_start": int or regex,
    "position_end":   int or regex,
    "in_position": bool,   # toggled by start and end
    "command_type": str,
    "is_global": bool,
    "pattern": regex,
    "target": regex,
    "replacement": regex,
}
"""


def is_in_position(sed_command, position, line, is_last_line):
    if sed_command["position_start"] == 0:
        if sed_command["position"] == -1:
            return True
        if sed_command["position"] == position:
            return True
        if sed_command["position"] == -2 and is_last_line == True:
            return True
    else:
        old = sed_command["in_position"]
        alter_flag = False
        match_flag = False
        if type(sed_command["position_end"]) == int:
            if sed_command["position_end"] == position:
                sed_command["in_position"] = False
                alter_flag = True
        else:
            if re.search(sed_command["position_end"], line):
                sed_command["in_position"] = False
                alter_flag = True

        if type(sed_command["position_start"]) == int:
            if sed_command["position_start"] == position:
                sed_command["in_position"] = True
                alter_flag = False
                match_flag = True
        else:
            if re.search(sed_command["position_start"], line):
                sed_command["in_position"] = True
                alter_flag = False
                match_flag = True

        if type(sed_command["position_end"]) == int:
            if sed_command["position_end"] < position:
                sed_command["in_position"] = False
                return match_flag

        if alter_flag == True:
            return old

        return sed_command["in_position"]

    return False


def slippy_quit(sed_command, line, position, is_last_line):
    if is_in_position(sed_command, position, line, is_last_line):
        if re.search(sed_command["pattern"], line):
            return QUIT
    return 0


def slippy_delete(sed_command, line, position, is_last_line):
    if is_in_position(sed_command, position, line, is_last_line):
        if re.search(sed_command["pattern"], line):
            return DELETE
    return 0


def slippy_print(sed_command, line, position, is_last_line):
    if is_in_position(sed_command, position, line, is_last_line):
        if re.search(sed_command["pattern"], line):
            print(line, end="")
    return 0


def slippy_search(sed_command, line, position, is_last_line):
    count = 1
    if sed_command["is_global"]:
        count = 0

    if is_in_position(sed_command, position, line, is_last_line):
        if re.search(sed_command["pattern"], line):
            line = re.sub(
                sed_command["target"], sed_command["replacement"], line, count=count
            )
            print(str(line), end="")
            return REPLACED
    return 0


def slippy_append(sed_command, line, position, is_last_line):
    if is_in_position(sed_command, position, line, is_last_line):
        return APPEND


def slippy_insert(sed_command, line, position, is_last_line):
    if is_in_position(sed_command, position, line, is_last_line):
        print(sed_command["replacement"])


def slippy_change(sed_command, line, position, is_last_line):
    if is_in_position(sed_command, position, line, is_last_line):
        print(sed_command["replacement"])
        return CHANGE


# perform_command is a dictionary that maps command to function
perform_command = {
    "q": slippy_quit,
    "p": slippy_print,
    "d": slippy_delete,
    "s": slippy_search,
    "a": slippy_append,
    "i": slippy_insert,
    "c": slippy_change,
}


def perform(sed_command_list, args):
    current_file = 0
    position = 1
    line = sys.stdin.readline()
    # readline returns an empty string if the end of the file has been reached
    while line != "":
        signal = 0
        is_last_line = False
        next_line = sys.stdin.readline()
        if next_line == "":
            current_file += 1
            try:
                sys.stdin = args.files[current_file]
                next_line = sys.stdin.readline()
            except:
                is_last_line = True

        for sed_command in sed_command_list:
            signal = perform_command[sed_command["command_type"]](
                sed_command, line, position, is_last_line
            )
            if signal == REPLACED:
                break
            if signal == DELETE:
                break
            if signal == QUIT:
                break

        if not args.n and signal != DELETE and signal != REPLACED and signal != CHANGE:
            print(line, end="")
        if signal == APPEND:
            print(sed_command["replacement"])
        if signal == QUIT:
            break

        # -i replaces files
        if args.i and next_line == "":
            sys.stdout.close()
            sys.stdout = sys.__stdout__
            if args.i:
                shutil.copyfile(TEMP_FILE, args.files[current_file - 1].name)
            try:
                sys.stdout = args.files[current_file]
            except:
                pass

        line = next_line
        position += 1


##############################################################################
#                               HELPERs                                      #
##############################################################################


def get_splitter(string):
    if len(string) == 0:
        return None
    head = re.split("(\d+)", string)
    # s_1_ll_g
    if string[0] == "s":
        splitter = string[1]
        return splitter
    # 5s_1_ll_g
    else:
        try:
            if head[2][0] == "s":
                splitter = head[2][1]
                return splitter
        except:
            pass
    for ch in string:
        if ch in ["/", "|"]:
            return ch
    return None


def invalid_command():
    print(f"{sys.argv[0]}: command line: invalid command")
    if os.path.exists(TEMP_FILE):
        os.remove(TEMP_FILE)
    sys.exit(1)


# return regex pattern
def get_pattern(commands, position, splitter):
    try:
        return re.compile(
            commands[position].replace(splitter, ""),
        )
    except:
        print(f"{sys.argv[0]}: command line: invalid command")
        if os.path.exists(TEMP_FILE):
            os.remove(TEMP_FILE)
        sys.exit(1)


# return string
def get_sed_command(commands, position):
    try:
        sed_command = commands[position]
        if sed_command not in SLIPPY_COMMAND:
            invalid_command()
        return sed_command
    except:
        invalid_command()


##############################################################################
#                                MAIN                                        #
##############################################################################


def main():
    # command line arguments analysis
    parser = ArgumentParser(
        usage=f"{sys.argv[0]} [-i] [-n] [-f <script-file> | <sed-command>] [<files>...]",
        exit_on_error=False,
    )
    parser.add_argument("-i", action="store_true")
    parser.add_argument("-n", action="store_true")
    parser.add_argument("-f", action="store_true")
    parser.add_argument("command")
    # read multiple files to a list
    parser.add_argument(
        "files",
        metavar="FILE",
        type=argparse.FileType("r"),
        nargs="*",
        help="files to read, if empty, stdin is used",
    )

    if len(sys.argv) == 1:
        parser.print_usage()
        sys.exit(1)

    try:
        args, unknown = parser.parse_known_args()
        if unknown != []:
            print(f"{sys.argv[0]}: error")
    except argparse.ArgumentError as e:
        print(e)

    if args.f:
        try:
            args.command = open(args.command, "r").read().rstrip()
        except:
            print(f"{sys.argv[0]}: error")
            sys.exit(1)

    if len(args.files) != 0:
        sys.stdin = args.files[0]
        if args.i:
            sys.stdout = open(TEMP_FILE, "w")

    # commands separated by ; and newline
    args_command_list = re.split(";|\n", args.command)
    sed_command_list = []

    for args_command in args_command_list:
        # remove # and after, and white space
        args_command = re.sub("#.*", "", args_command).strip()

        # default value for sed_command dict
        position = -1  # -1 means all positions
        position_start = 0
        position_end = 0
        is_global = False
        pattern = ""  # default pattern, match everything
        target = ""
        replacement = ""

        if args_command == "":
            continue
        splitter = get_splitter(args_command)

        # '3,5d'
        # '/1$/,/^2/d'
        # '/4/,/6/s/[12]/9/'
        # '3,/2/d'
        if "," in args_command:
            addr_command = args_command.split(",")
            addr_command = list(map(str.strip, addr_command))  # strip every element
            try:
                position_start = int(addr_command[0])
            except:
                position_start = get_pattern(addr_command, 0, splitter)
            args_command = addr_command[1:][0]

        # Regex mode
        if splitter != None:  # sed splitter

            commands = args_command.split(splitter)
            commands = list(map(str.strip, commands))  # strip every element
            # /pattern/command  eg /.3/q /17/d
            # /pattern/command/target/repl/q  eg '/1.1/s/1/-/g'
            if commands[0] == "":
                pattern = get_pattern(commands, 1, splitter)
                position_end = get_pattern(commands, 1, splitter)
                sed_command = get_sed_command(commands, 2)
                if position_start != 0:
                    pattern = ""
                # '/1.1/s/1/-/g'
                if sed_command == "s":
                    try:
                        target = commands[3]
                        if target == "":
                            target = " "
                        replacement = commands[4]
                    except:
                        invalid_command()
                    try:
                        if commands[5] == "g":
                            is_global = True
                    except:
                        pass

            # s/pattern/replacement/g
            # '5s/5/9/g'
            # ['5s', '5', '9', 'g']
            else:
                # separate number and command
                head = re.split("(\d+)", commands[0])
                if len(head) == 1:  # s/5/9/g' ['s']
                    sed_command = head[0]
                elif len(head) == 3:  #'5s/5/9/g' ['', '5', 's']
                    try:
                        position = int(head[1])
                        position_end = int(head[1])
                    except:
                        invalid_command()
                    sed_command = get_sed_command(head, 2)
                else:
                    invalid_command()

                try:
                    if commands[3] == "g":
                        is_global = True
                except:
                    pass

                if sed_command == "s":
                    try:
                        pattern = get_pattern(commands, 1, splitter)
                        target = commands[1]
                        if target == "":
                            target = " "
                        replacement = commands[2]
                    except:
                        invalid_command()

        # Address Mode
        # '5d'
        # '$d'
        # '3a hello'
        else:
            if args_command.split()[0][-1] in ["a", "i", "c"]:
                sed_command = args_command.split()[0][-1]
                replacement = (" ").join(args_command.split()[1:])
                if args_command.split()[0][0:-1] == "$":
                    position = -2
                elif args_command.split()[0][0:-1] == "":
                    position = -1
                else:
                    position = int(args_command.split()[0][0:-1])
            else:
                sed_command = args_command[-1]
                if len(args_command) == 1:
                    position = -1
                else:
                    if args_command[:-1] == "$":
                        # -2 means last line
                        position = -2
                    else:
                        try:
                            position = int(args_command[:-1])
                            position_end = int(args_command[:-1])
                        except:
                            invalid_command()
                if sed_command not in ["q", "p", "d"]:
                    invalid_command()

        if sed_command not in SLIPPY_COMMAND:
            invalid_command()

        command_args = {
            "command_type": sed_command,
            "position": position,
            "position_start": position_start,
            "position_end": position_end,
            "in_position": False,
            "is_global": is_global,
            "pattern": pattern,
            "target": target,
            "replacement": replacement,
        }

        sed_command_list.append(command_args)

    perform(sed_command_list, args)

    sys.stdout.close()
    if os.path.exists(TEMP_FILE):
        os.remove(TEMP_FILE)


if __name__ == "__main__":
    main()
